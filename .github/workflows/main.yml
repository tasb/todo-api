name: TodoAPP Main

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      checks: write


    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: |
        dotnet restore src/TodoAPI/TodoAPI.csproj
        dotnet restore src/TodoWebapp/TodoWebapp.csproj
    
    - name: Build
      run: |
        dotnet build --no-restore src/TodoAPI/TodoAPI.csproj
        dotnet build --no-restore src/TodoWebapp/TodoWebapp.csproj
    
    - name: Publish TodoAPI
      run: |
        dotnet publish --no-build src/TodoAPI/TodoAPI.csproj -o src/TodoAPI/publish

    - name: Publish TodoWebapp
      run: |
        dotnet publish --no-build src/TodoWebapp/TodoWebapp.csproj -o src/TodoWebapp/publish

    - uses: actions/upload-artifact@v4
      with:
        name: todo-api
        path: src/TodoAPI/publish

    - uses: actions/upload-artifact@v4
      with:
        name: todo-webapp
        path: src/TodoWebapp/publish


  provision-api:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
      checks: write
      issues: write
    env: # these variables will be set as environment variables for script actions and are needed to run Terraform commands
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true # to use OIDC authentication on Terraform
      ARTIFACT_NAME: todo-api
    defaults:
      run:
        working-directory: ./deploy/terraform/todo-api

    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./${{ env.ARTIFACT_NAME }}
    
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: terraform init
      run: terraform init
    
    - name: terraform plan
      id: tfplan
      run: terraform plan -var="dbPassword=${{ secrets.DB_PASSWORD }}" -var="env=prod" -out=tfplan

    - name: Terraform Plan Status
      if: steps.tfplan.outcome == 'failure'
      run: exit 1

    - name: terraform apply
      run: |
        terraform apply tfplan
        echo "WEBAPP_NAME=$(terraform output -raw webappName)" >> $GITHUB_ENV
        echo "DB_ADDRESS=$(terraform output -raw dbAddress)" >> $GITHUB_ENV
        echo "WEBAPP_URL=$(terraform output -raw webappUrl)" >> $GITHUB_ENV

    - name: 'Azure webapp deploy - Prod'
      id: prod-deploy
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.WEBAPP_NAME }}
        package: ./${{ env.ARTIFACT_NAME }}

    - name: 'Configure azure webapp - Prod'
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.WEBAPP_NAME }}
        mask-inputs: false
        app-settings-json: '[{"name": "ConnectionStrings__TodosDb","value": "Server=${{ env.DB_ADDRESS }};Database=TodoDB;Port=5432;User Id=dbadmin;Password=${{ secrets.DB_PASSWORD }};Ssl Mode=VerifyFull;","slotSetting": true}, {"name": "ASPNETCORE_ENVIRONMENT", "value": "Development"}]'

    - name: logout
      run: |
        az logout


  provision-webapp:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
      checks: write
      issues: write
    env: # these variables will be set as environment variables for script actions and are needed to run Terraform commands
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true # to use OIDC authentication on Terraform
      ARTIFACT_NAME: todo-webapp
    defaults:
      run:
        working-directory: ./deploy/terraform/todo-webapp

    outputs:
      webappUrl: "https://${{ steps.apply.outputs.WEBAPP_URL }}"

    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./${{ env.ARTIFACT_NAME }}
    
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: terraform init
      run: terraform init
    
    - name: terraform plan
      id: tfplan
      run: terraform plan -var="env=prod" -out=tfplan

    - name: Terraform Plan Status
      if: steps.tfplan.outcome == 'failure'
      run: exit 1

    - name: terraform apply
      id: apply
      run: |
        terraform apply tfplan
        echo "WEBAPP_NAME=$(terraform output -raw webappName)" >> $GITHUB_ENV
        echo "WEBAPI_URL=$(terraform output -raw webapiUrl)" >> $GITHUB_ENV
        echo "WEBAPP_URL=$(terraform output -raw webappUrl)" >> $GITHUB_ENV
        echo "WEBAPP_URL=$(terraform output -raw webappUrl)" >> "$GITHUB_OUTPUT"

    - name: 'Azure webapp deploy - Prod'
      id: prod-deploy
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.WEBAPP_NAME }}
        package: ./${{ env.ARTIFACT_NAME }}
  
    - name: 'Configure azure webapp - Prod'
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.WEBAPP_NAME }}
        mask-inputs: false
        app-settings-json: '[{"name": "Services__TodoAPI","value": "https://${{ env.WEBAPI_URL }}/todos/","slotSetting": true}]'
      id: settings

    - name: logout
      run: |
        az logout

  prod-dast:
    runs-on: ubuntu-latest
    needs: [provision-api, provision-webapp]
    env:
      WEBAPP_URL: ${{needs.provision-webapp.outputs.webappUrl}}
    permissions:
      id-token: write
      contents: read
      checks: write
      issues: write

    steps:
      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.9.0
        with:
          target: '${{ env.WEBAPP_URL }}'