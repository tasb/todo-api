name: TodoAPI PR

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      checks: write


    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: |
        dotnet restore src/TodoAPI/TodoAPI.csproj
        dotnet restore src/TodoAPI.Tests/TodoAPI.Tests.csproj
    
    - name: Build
      run: |
        dotnet build --no-restore src/TodoAPI/TodoAPI.csproj
        dotnet build --no-restore src/TodoAPI.Tests/TodoAPI.Tests.csproj
    
    - name: Test
      run: dotnet test --no-build src/TodoAPI.Tests/TodoAPI.Tests.csproj --verbosity normal --logger "trx;LogFileName=test-results.trx"
      
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Todo API Tests
        path: '**/TestResults/*.trx'
        reporter: dotnet-trx

    - name: Publish
      run: |
        dotnet publish --no-build src/TodoAPI/TodoAPI.csproj -o src/TodoAPI/publish

    - uses: actions/upload-artifact@v4
      with:
        name: todo-api
        path: src/TodoAPI/publish

  # sca:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   permissions:
  #     contents: read
  #     packages: read
  #     actions: read
  #     security-events: write


  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v2
  #     with:
  #       dotnet-version: 6.0.x
  #   - name: Restore dependencies
  #     run: |
  #       dotnet restore src/TodoAPI/TodoAPI.csproj
  #       dotnet restore src/TodoAPI.Tests/TodoAPI.Tests.csproj

  #   - name: Run Snyk to check for vulnerabilities
  #     uses: snyk/actions/dotnet@master
  #     continue-on-error: true
  #     env:
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       args: --sarif-file-output=snyk.sarif --file=TodoApp.sln
        
  #   - name: Upload result to GitHub Code Scanning
  #     uses: github/codeql-action/upload-sarif@v3
  #     with:
  #       sarif_file: snyk.sarif

  #   - name: Publish security report to artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: snyk-report
  #       path: snyk.sarif
    
  # security-analysis:
  #   name: Security Analysis
  #   runs-on: ubuntu-latest
  #   needs: build

  #   permissions:
  #     contents: read
  #     packages: read
  #     actions: read
  #     security-events: write

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     # CodeQL Analysis
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: 'csharp'
  #         queries: 'security-extended,security-and-quality'
  #         build-mode: 'none'

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
  #       with:
  #         category: "/language:csharp"

  #     # SonarCloud Analysis
  #     - name: Set up SonarCloud
  #       uses: sonarsource/sonarcloud-github-action@v3.1.0
  #       with:
  #         projectBaseDir: src/TodoAPI
  #         args: >
  #           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
  #           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
  #           -Dsonar.verbose=true
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # scan-terraform:
  #   permissions:
  #     contents: read
  #     security-events: write
  #     actions: read

  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Checkov GitHub Action
  #       uses: bridgecrewio/checkov-action@v12
  #       continue-on-error: true
  #       with:
  #         # This will add both a CLI output to the console and create a results.sarif file
  #         output_format: cli,sarif
  #         output_file_path: console,results.sarif
  #         directory: deploy/terraform/todo-api
        
  #     - name: Upload SARIF file
  #       uses: github/codeql-action/upload-sarif@v3
        
  #       # Results are generated only on a success or failure
  #       # this is required since GitHub by default won't run the next step
  #       # when the previous one has failed. Security checks that do not pass will 'fail'.
  #       # An alternative is to add `continue-on-error: true` to the previous step
  #       # Or 'soft_fail: true' to checkov.
  #       if: success() || failure()
  #       with:
  #         sarif_file: results.sarif

  #     - name: Publish security report to artifact
  #       uses: actions/upload-artifact@v4
  #       if: success() || failure()
  #       with:
  #         name: checkov-report
  #         path: results.sarif

  # run-container-scan: 
  #   permissions:
  #     contents: read
  #     security-events: write
  #     actions: read

  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: build local container
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: src/TodoAPI
  #         tags: todo-api:trivy
  #         push: false
  #         load: true
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: todo-api:trivy
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         vuln-type: 'os,library'
  #         severity: 'MEDIUM'

  #     - name: Upload SARIF file
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: success() || failure()
  #       with:
  #         sarif_file: trivy-results.sarif
      
  #     - name: Publish security report to artifact
  #       uses: actions/upload-artifact@v4
  #       if: success() || failure()
  #       with:
  #         name: trivy-report
  #         path: trivy-results.sarif

  #     - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         scan-type: 'fs'
  #         format: 'github'
  #         output: 'dependency-results.sbom.json'
  #         image-ref: '.'
  #         github-pat: ${{ secrets.GITHUB_TOKEN }} 

  dast:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
      checks: write
    env: # these variables will be set as environment variables for script actions and are needed to run Terraform commands
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true # to use OIDC authentication on Terraform
      ARTIFACT_NAME: todo-api
    defaults:
      run:
        working-directory: ./deploy/terraform

    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./${{ env.ARTIFACT_NAME }}
    
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: terraform init
      run: terraform init
    
    - name: terraform plan
      id: tfplan
      run: terraform plan -var="dbPassword=${{ secrets.DB_PASSWORD }}" -var="env=dast" -out=tfplan

    - name: Terraform Plan Status
      if: steps.tfplan.outcome == 'failure'
      run: exit 1

    - name: terraform apply
      run: |
        terraform apply tfplan
        echo "WEBAPP_NAME=$(terraform output -raw webappName)" >> $GITHUB_ENV
        echo "DB_ADDRESS=$(terraform output -raw dbAddress)" >> $GITHUB_ENV
        echo "WEBAPP_URL=$(terraform output -raw webappURL)" >> $GITHUB_ENV

    - name: 'Azure webapp deploy - Staging'
      id: stg-deploy
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.WEBAPP_NAME }}
        package: ./${{ env.ARTIFACT_NAME }}
  
    - name: 'Configure azure webapp - Staging'
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.WEBAPP_NAME }}
        mask-inputs: false
        app-settings-json: '[{"name": "ConnectionStrings__TodosDb","value": "Server=${{ env.DB_ADDRESS }};Database=TodoDB;Port=5432;User Id=dbadmin;Password=${{ secrets.DB_PASSWORD }};Ssl Mode=VerifyFull;","slotSetting": true}, {"name": "ASPNETCORE_ENVIRONMENT", "value": "Development"}]'
  
    - name: logout
      run: |
        az logout
